{"version":3,"sources":["components/Card.js","components/Header.js","App.js","shuffle.js","index.js"],"names":["Card","props","className","position","index","onClick","checkIfClicked","src","character","img","alt","id","occupation","Header","score","bestScore","App","savedScore","JSON","parse","localStorage","getItem","console","log","useState","setScore","setBestScore","Array","characters","length","fill","clicked","setClicked","endGame","prev","arr","slice","setItem","stringify","resetClicked","cards","map","useEffect","array","i","j","Math","floor","random","shuffle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAsBeA,G,OAnBF,SAACC,GAEV,OACI,yBAAKC,UAAU,OAAOC,SAAUF,EAAMG,MAAOC,QAAS,kBAAMJ,EAAMK,eAAeL,EAAMG,SACnF,yBAAKF,UAAU,cACX,yBAAKK,IAAKN,EAAMO,UAAUC,IAAKC,IAAI,MAEvC,yBAAKR,UAAU,QACX,2BAAID,EAAMO,UAAUG,KAExB,yBAAKT,UAAU,cACX,qCAAWD,EAAMG,OACjB,2BAAIH,EAAMO,UAAUI,gBCJrBC,EATA,SAACZ,GACZ,OACI,6BACI,2BAAIA,EAAMa,OACV,2BAAIb,EAAMc,a,sBC4DPC,MAzDf,WACE,IAAIC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,cAC/B,OAAfJ,IACDA,EAAa,GAGbK,QAAQC,IAAIN,GAND,MAOeO,mBAAS,GAPxB,mBAOJV,EAPI,KAOGW,EAPH,OAQuBD,mBAASP,GARhC,mBAQJF,EARI,KAQOW,EARP,OASmBF,mBAASG,MAAMC,EAAWC,QAAQC,MAAK,IAT1D,mBASJC,EATI,KASKC,EATL,KAWL1B,EAAiB,SAACF,GACnB2B,EAAQ3B,IACTkB,QAAQC,IAAI,OACZE,EAAS,GACTQ,MAEAR,EAASX,EAAQ,GACjBkB,GAAW,SAAAE,GACT,IAAIC,EAAMD,EAAKE,QAEf,OADAD,EAAI/B,IAAS,EACN+B,OAKPF,EAAU,WACXnB,EAAQC,GACTW,EAAaZ,GAEfM,aAAaiB,QAAQ,YAAanB,KAAKoB,UAAUvB,IACjDwB,KAGIA,EAAe,WACnBP,EAAWL,MAAMC,EAAWC,QAAQC,MAAK,KAGvCU,EAAQZ,EAAWa,KAAI,SAACjC,EAAWJ,GACrC,OACE,kBAAC,EAAD,CAAME,eAAgBA,EAAgBF,MAAOA,EAAOI,UAAWA,OAQrE,OAJEkC,qBAAU,cAER,CAACX,IAGH,yBAAK7B,UAAU,aACb,kBAAC,EAAD,CAAQY,MAAOA,EAAOC,UAAWA,IC3DxB,SAAiB4B,GAE5B,IADA,IAAIR,EAAMQ,EAAMP,QACRQ,EAAIT,EAAIN,OAAS,EAAGe,EAAI,EAAGA,IAAI,CACnC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADL,EAIhB,CAACT,EAAIU,GAAIV,EAAIS,IAA/BT,EAAIS,GAJ8B,KAI1BT,EAAIU,GAJsB,KAMvC,OAAOV,EDqDJc,CAAQT,KEzDfU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.da8e3723.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\n\r\nimport './Card.css'\r\nconst Card = (props) => {\r\n\r\n    return(\r\n        <div className=\"card\" position={props.index} onClick={() => props.checkIfClicked(props.index)}>\r\n            <div className=\"card-image\">\r\n                <img src={props.character.img} alt=\"\" />\r\n            </div>\r\n            <div className=\"name\">\r\n                <p>{props.character.id}</p>\r\n            </div>\r\n            <div className=\"desciption\">\r\n                <p>index: {props.index}</p>\r\n                <p>{props.character.occupation}</p>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React, {useState, useEffect} from 'react'\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <div>\r\n            <p>{props.score}</p>\r\n            <p>{props.bestScore}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { useState, useEffect} from 'react';\nimport Card from './components/Card'\nimport Header from './components/Header'\nimport characters from './characters.json'\nimport './App.css'\nimport shuffle from './shuffle'\nimport { render } from '@testing-library/react';\n\n\nfunction App() {\n  let savedScore = JSON.parse(localStorage.getItem('bestScore'))\n  if(savedScore === null){\n    savedScore = 0;\n  }\n  \n    console.log(savedScore)\n    const [score, setScore] = useState(0)\n    const [bestScore, setBestScore] = useState(savedScore)\n    const [clicked, setClicked] = useState(Array(characters.length).fill(false))\n\n    const checkIfClicked = (index) => {\n      if(clicked[index]){\n        console.log('sad')\n        setScore(0)\n        endGame()\n      }else{\n        setScore(score + 1)\n        setClicked(prev => {\n          let arr = prev.slice()\n          arr[index] = true;\n          return arr;\n        })\n      }\n    }\n\n    const endGame = () => {\n      if(score > bestScore){\n        setBestScore(score)\n      }\n      localStorage.setItem('bestScore', JSON.stringify(bestScore))\n      resetClicked()\n    }\n\n    const resetClicked = () => {\n      setClicked(Array(characters.length).fill(false))\n    }\n\n    let cards = characters.map((character, index) => {\n      return(\n        <Card checkIfClicked={checkIfClicked} index={index} character={character}/>\n      )\n    })\n\n    useEffect(() => {\n\n    },[clicked])\n\n  return (\n    <div className=\"gameboard\">\n      <Header score={score} bestScore={bestScore} />\n      {/* <div>{clicked.map((x) => x ? 'true' : 'false')}</div> */}\n      {shuffle(cards)}\n    </div>\n  );\n}\n\nexport default App;\n","export default function shuffle(array){\r\n    let arr = array.slice()\r\n    for(let i = arr.length - 1; i > 0; i--){\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n\r\n        \r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n    }\r\n    return(arr)\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}